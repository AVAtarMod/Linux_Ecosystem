// generated by /usr/local/bin/sqlpp11-ddl2cpp architecture/first-level/component-storage/CSt.db-script.sql code/component-storage/orm component_storage
#ifndef COMPONENT_STORAGE_ORM_H
#define COMPONENT_STORAGE_ORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace component_storage
{
  namespace Ecosystem_
  {
    struct EcosystemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ecosystem_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ecosystemId;
            T& operator()() { return ecosystemId; }
            const T& operator()() const { return ecosystemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct StoragePolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "storage_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T storagePolicyId;
            T& operator()() { return storagePolicyId; }
            const T& operator()() const { return storagePolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Ecosystem_

  struct Ecosystem: sqlpp::table_t<Ecosystem,
               Ecosystem_::EcosystemId,
               Ecosystem_::StoragePolicyId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Ecosystem";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Ecosystem;
        T& operator()() { return Ecosystem; }
        const T& operator()() const { return Ecosystem; }
      };
    };
  };
  namespace Component_
  {
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UiLogo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ui_logo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uiLogo;
            T& operator()() { return uiLogo; }
            const T& operator()() const { return uiLogo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TimeInstall
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_install";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeInstall;
            T& operator()() { return timeInstall; }
            const T& operator()() const { return timeInstall; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct TimeUpdate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time_update";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeUpdate;
            T& operator()() { return timeUpdate; }
            const T& operator()() const { return timeUpdate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace Component_

  struct Component: sqlpp::table_t<Component,
               Component_::ComponentId,
               Component_::UiLogo,
               Component_::TimeInstall,
               Component_::TimeUpdate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Component";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Component;
        T& operator()() { return Component; }
        const T& operator()() const { return Component; }
      };
    };
  };
  namespace Ecosystem_Component_
  {
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EcosystemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ecosystem_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ecosystemId;
            T& operator()() { return ecosystemId; }
            const T& operator()() const { return ecosystemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Ecosystem_Component_

  struct Ecosystem_Component: sqlpp::table_t<Ecosystem_Component,
               Ecosystem_Component_::ComponentId,
               Ecosystem_Component_::EcosystemId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Ecosystem_Component";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Ecosystem_Component;
        T& operator()() { return Ecosystem_Component; }
        const T& operator()() const { return Ecosystem_Component; }
      };
    };
  };
  namespace StoragePolicy_
  {
    struct StoragePolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "storage_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T storagePolicyId;
            T& operator()() { return storagePolicyId; }
            const T& operator()() const { return storagePolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UseSharedViews
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "use_shared_views";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T useSharedViews;
            T& operator()() { return useSharedViews; }
            const T& operator()() const { return useSharedViews; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
    struct SpaceRestrictionPolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "space_restriction_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spaceRestrictionPolicyId;
            T& operator()() { return spaceRestrictionPolicyId; }
            const T& operator()() const { return spaceRestrictionPolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "create_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace StoragePolicy_

  struct StoragePolicy: sqlpp::table_t<StoragePolicy,
               StoragePolicy_::StoragePolicyId,
               StoragePolicy_::UseSharedViews,
               StoragePolicy_::SpaceRestrictionPolicyId,
               StoragePolicy_::CreateTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "StoragePolicy";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T StoragePolicy;
        T& operator()() { return StoragePolicy; }
        const T& operator()() const { return StoragePolicy; }
      };
    };
  };
  namespace SpaceRestrictionPolicy_
  {
    struct SpaceRestrictionPolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "space_restriction_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spaceRestrictionPolicyId;
            T& operator()() { return spaceRestrictionPolicyId; }
            const T& operator()() const { return spaceRestrictionPolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct UiName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ui_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uiName;
            T& operator()() { return uiName; }
            const T& operator()() const { return uiName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "create_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  } // namespace SpaceRestrictionPolicy_

  struct SpaceRestrictionPolicy: sqlpp::table_t<SpaceRestrictionPolicy,
               SpaceRestrictionPolicy_::SpaceRestrictionPolicyId,
               SpaceRestrictionPolicy_::UiName,
               SpaceRestrictionPolicy_::CreateTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "SpaceRestrictionPolicy";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T SpaceRestrictionPolicy;
        T& operator()() { return SpaceRestrictionPolicy; }
        const T& operator()() const { return SpaceRestrictionPolicy; }
      };
    };
  };
  namespace UserRestriction_
  {
    struct ParentPolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parent_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parentPolicyId;
            T& operator()() { return parentPolicyId; }
            const T& operator()() const { return parentPolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MaxSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxSize;
            T& operator()() { return maxSize; }
            const T& operator()() const { return maxSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsAllowPartitioning
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_allow_partitioning";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isAllowPartitioning;
            T& operator()() { return isAllowPartitioning; }
            const T& operator()() const { return isAllowPartitioning; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
    struct MaxPartitionCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_partition_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxPartitionCount;
            T& operator()() { return maxPartitionCount; }
            const T& operator()() const { return maxPartitionCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace UserRestriction_

  struct UserRestriction: sqlpp::table_t<UserRestriction,
               UserRestriction_::ParentPolicyId,
               UserRestriction_::UserId,
               UserRestriction_::MaxSize,
               UserRestriction_::IsAllowPartitioning,
               UserRestriction_::MaxPartitionCount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "UserRestriction";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T UserRestriction;
        T& operator()() { return UserRestriction; }
        const T& operator()() const { return UserRestriction; }
      };
    };
  };
  namespace ExternalViewUser_
  {
    struct UserId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "user_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userId;
            T& operator()() { return userId; }
            const T& operator()() const { return userId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
  } // namespace ExternalViewUser_

  struct ExternalViewUser: sqlpp::table_t<ExternalViewUser,
               ExternalViewUser_::UserId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ExternalView_User";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ExternalViewUser;
        T& operator()() { return ExternalViewUser; }
        const T& operator()() const { return ExternalViewUser; }
      };
    };
  };
  namespace ComponentRestriction_
  {
    struct ParentPolicyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parent_policy_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parentPolicyId;
            T& operator()() { return parentPolicyId; }
            const T& operator()() const { return parentPolicyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MaxSize
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max_size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxSize;
            T& operator()() { return maxSize; }
            const T& operator()() const { return maxSize; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace ComponentRestriction_

  struct ComponentRestriction: sqlpp::table_t<ComponentRestriction,
               ComponentRestriction_::ParentPolicyId,
               ComponentRestriction_::ComponentId,
               ComponentRestriction_::MaxSize>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ComponentRestriction";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ComponentRestriction;
        T& operator()() { return ComponentRestriction; }
        const T& operator()() const { return ComponentRestriction; }
      };
    };
  };
  namespace Manifest_
  {
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct SchemeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scheme_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T schemeId;
            T& operator()() { return schemeId; }
            const T& operator()() const { return schemeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct UiName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ui_name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uiName;
            T& operator()() { return uiName; }
            const T& operator()() const { return uiName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct UiDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ui_description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uiDescription;
            T& operator()() { return uiDescription; }
            const T& operator()() const { return uiDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Version
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T version;
            T& operator()() { return version; }
            const T& operator()() const { return version; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace Manifest_

  struct Manifest: sqlpp::table_t<Manifest,
               Manifest_::ManifestId,
               Manifest_::Hash,
               Manifest_::SchemeId,
               Manifest_::Name,
               Manifest_::UiName,
               Manifest_::UiDescription,
               Manifest_::Version>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Manifest;
        T& operator()() { return Manifest; }
        const T& operator()() const { return Manifest; }
      };
    };
  };
  namespace Component_Manifest_
  {
    struct ComponentInfoId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_info_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentInfoId;
            T& operator()() { return componentInfoId; }
            const T& operator()() const { return componentInfoId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Component_Manifest_

  struct Component_Manifest: sqlpp::table_t<Component_Manifest,
               Component_Manifest_::ComponentInfoId,
               Component_Manifest_::ManifestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Component_Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Component_Manifest;
        T& operator()() { return Component_Manifest; }
        const T& operator()() const { return Component_Manifest; }
      };
    };
  };
  namespace ManifestScheme_
  {
    struct SchemeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "scheme_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T schemeId;
            T& operator()() { return schemeId; }
            const T& operator()() const { return schemeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct FieldDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "field_description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fieldDescription;
            T& operator()() { return fieldDescription; }
            const T& operator()() const { return fieldDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  } // namespace ManifestScheme_

  struct ManifestScheme: sqlpp::table_t<ManifestScheme,
               ManifestScheme_::SchemeId,
               ManifestScheme_::FieldDescription>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ManifestScheme";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ManifestScheme;
        T& operator()() { return ManifestScheme; }
        const T& operator()() const { return ManifestScheme; }
      };
    };
  };
  namespace NetworkAccess_
  {
    struct NetAccessId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "net_access_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T netAccessId;
            T& operator()() { return netAccessId; }
            const T& operator()() const { return netAccessId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Uri
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uri";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uri;
            T& operator()() { return uri; }
            const T& operator()() const { return uri; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Protocol
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "protocol";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T protocol;
            T& operator()() { return protocol; }
            const T& operator()() const { return protocol; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Port
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "port";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T port;
            T& operator()() { return port; }
            const T& operator()() const { return port; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsOptional
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_optional";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isOptional;
            T& operator()() { return isOptional; }
            const T& operator()() const { return isOptional; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
  } // namespace NetworkAccess_

  struct NetworkAccess: sqlpp::table_t<NetworkAccess,
               NetworkAccess_::NetAccessId,
               NetworkAccess_::Uri,
               NetworkAccess_::Protocol,
               NetworkAccess_::Port,
               NetworkAccess_::IsOptional>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "NetworkAccess";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T NetworkAccess;
        T& operator()() { return NetworkAccess; }
        const T& operator()() const { return NetworkAccess; }
      };
    };
  };
  namespace NetworkAccess_Manifest_
  {
    struct FieldId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "field_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fieldId;
            T& operator()() { return fieldId; }
            const T& operator()() const { return fieldId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace NetworkAccess_Manifest_

  struct NetworkAccess_Manifest: sqlpp::table_t<NetworkAccess_Manifest,
               NetworkAccess_Manifest_::FieldId,
               NetworkAccess_Manifest_::ManifestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "NetworkAccess_Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T NetworkAccess_Manifest;
        T& operator()() { return NetworkAccess_Manifest; }
        const T& operator()() const { return NetworkAccess_Manifest; }
      };
    };
  };
  namespace BaseInfo_
  {
    struct BaseInfoId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "base_info_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T baseInfoId;
            T& operator()() { return baseInfoId; }
            const T& operator()() const { return baseInfoId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct MinSdkVer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "min_sdk_ver";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minSdkVer;
            T& operator()() { return minSdkVer; }
            const T& operator()() const { return minSdkVer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TargetSdkVer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "target_sdk_ver";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetSdkVer;
            T& operator()() { return targetSdkVer; }
            const T& operator()() const { return targetSdkVer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace BaseInfo_

  struct BaseInfo: sqlpp::table_t<BaseInfo,
               BaseInfo_::BaseInfoId,
               BaseInfo_::MinSdkVer,
               BaseInfo_::TargetSdkVer>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "BaseInfo";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T BaseInfo;
        T& operator()() { return BaseInfo; }
        const T& operator()() const { return BaseInfo; }
      };
    };
  };
  namespace BaseInfo_Manifest_
  {
    struct BaseInfoId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "base_info_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T baseInfoId;
            T& operator()() { return baseInfoId; }
            const T& operator()() const { return baseInfoId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace BaseInfo_Manifest_

  struct BaseInfo_Manifest: sqlpp::table_t<BaseInfo_Manifest,
               BaseInfo_Manifest_::BaseInfoId,
               BaseInfo_Manifest_::ManifestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "BaseInfo_Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T BaseInfo_Manifest;
        T& operator()() { return BaseInfo_Manifest; }
        const T& operator()() const { return BaseInfo_Manifest; }
      };
    };
  };
  namespace ComponentPartInfo_
  {
    struct ComponentPartInfoId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_part_info_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentPartInfoId;
            T& operator()() { return componentPartInfoId; }
            const T& operator()() const { return componentPartInfoId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Priority
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "priority";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T priority;
            T& operator()() { return priority; }
            const T& operator()() const { return priority; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace ComponentPartInfo_

  struct ComponentPartInfo: sqlpp::table_t<ComponentPartInfo,
               ComponentPartInfo_::ComponentPartInfoId,
               ComponentPartInfo_::Type,
               ComponentPartInfo_::Priority>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ComponentPartInfo";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ComponentPartInfo;
        T& operator()() { return ComponentPartInfo; }
        const T& operator()() const { return ComponentPartInfo; }
      };
    };
  };
  namespace ComponentPartInfo_Manifest_
  {
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct FieldId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "field_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fieldId;
            T& operator()() { return fieldId; }
            const T& operator()() const { return fieldId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace ComponentPartInfo_Manifest_

  struct ComponentPartInfo_Manifest: sqlpp::table_t<ComponentPartInfo_Manifest,
               ComponentPartInfo_Manifest_::ManifestId,
               ComponentPartInfo_Manifest_::FieldId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ComponentPartInfo_Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ComponentPartInfo_Manifest;
        T& operator()() { return ComponentPartInfo_Manifest; }
        const T& operator()() const { return ComponentPartInfo_Manifest; }
      };
    };
  };
  namespace FilesystemAccess_
  {
    struct FsAccessId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fs_access_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fsAccessId;
            T& operator()() { return fsAccessId; }
            const T& operator()() const { return fsAccessId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Permissions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "permissions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permissions;
            T& operator()() { return permissions; }
            const T& operator()() const { return permissions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace FilesystemAccess_

  struct FilesystemAccess: sqlpp::table_t<FilesystemAccess,
               FilesystemAccess_::FsAccessId,
               FilesystemAccess_::Path,
               FilesystemAccess_::Permissions,
               FilesystemAccess_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "FilesystemAccess";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T FilesystemAccess;
        T& operator()() { return FilesystemAccess; }
        const T& operator()() const { return FilesystemAccess; }
      };
    };
  };
  namespace FilesystemAccess_Manifest_
  {
    struct FsAccessId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fs_access_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fsAccessId;
            T& operator()() { return fsAccessId; }
            const T& operator()() const { return fsAccessId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ManifestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "manifest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T manifestId;
            T& operator()() { return manifestId; }
            const T& operator()() const { return manifestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace FilesystemAccess_Manifest_

  struct FilesystemAccess_Manifest: sqlpp::table_t<FilesystemAccess_Manifest,
               FilesystemAccess_Manifest_::FsAccessId,
               FilesystemAccess_Manifest_::ManifestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "FilesystemAccess_Manifest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T FilesystemAccess_Manifest;
        T& operator()() { return FilesystemAccess_Manifest; }
        const T& operator()() const { return FilesystemAccess_Manifest; }
      };
    };
  };
} // namespace component_storage
#endif
