// generated by /usr/local/bin/sqlpp11-ddl2cpp architecture/first-level/tool-CM/TCM.db-script.sql code/tool-CM/orm model
#ifndef MODEL_ORM_H
#define MODEL_ORM_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace model
{
  namespace ExternalViewComponent Info_
  {
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
  } // namespace ExternalViewComponent Info_

  struct ExternalViewComponent Info: sqlpp::table_t<ExternalViewComponent Info,
               ExternalViewComponent Info_::ComponentId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "\"ExternalView_Component Info\"";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ExternalViewComponent Info;
        T& operator()() { return ExternalViewComponent Info; }
        const T& operator()() const { return ExternalViewComponent Info; }
      };
    };
  };
  namespace Component Status_
  {
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsEnabled
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_enabled";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isEnabled;
            T& operator()() { return isEnabled; }
            const T& operator()() const { return isEnabled; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Component Status_

  struct Component Status: sqlpp::table_t<Component Status,
               Component Status_::ComponentId,
               Component Status_::IsEnabled,
               Component Status_::Status>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "\"Component status\"";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Component Status;
        T& operator()() { return Component Status; }
        const T& operator()() const { return Component Status; }
      };
    };
  };
  namespace Component Dependency_
  {
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct DependencyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dependency_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dependencyId;
            T& operator()() { return dependencyId; }
            const T& operator()() const { return dependencyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct IsStrict
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_strict";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isStrict;
            T& operator()() { return isStrict; }
            const T& operator()() const { return isStrict; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::boolean, sqlpp::tag::require_insert>;
    };
  } // namespace Component Dependency_

  struct Component Dependency: sqlpp::table_t<Component Dependency,
               Component Dependency_::ComponentId,
               Component Dependency_::DependencyId,
               Component Dependency_::IsStrict>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "\"Component dependency\"";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Component Dependency;
        T& operator()() { return Component Dependency; }
        const T& operator()() const { return Component Dependency; }
      };
    };
  };
  namespace Component Endpoint_
  {
    struct EndpointId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "endpoint_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endpointId;
            T& operator()() { return endpointId; }
            const T& operator()() const { return endpointId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ComponentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "component_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T componentId;
            T& operator()() { return componentId; }
            const T& operator()() const { return componentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  } // namespace Component Endpoint_

  struct Component Endpoint: sqlpp::table_t<Component Endpoint,
               Component Endpoint_::EndpointId,
               Component Endpoint_::Name,
               Component Endpoint_::ComponentId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "\"Component endpoint\"";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Component Endpoint;
        T& operator()() { return Component Endpoint; }
        const T& operator()() const { return Component Endpoint; }
      };
    };
  };
} // namespace model
#endif
